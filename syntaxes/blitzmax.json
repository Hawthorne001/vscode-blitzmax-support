{
	"name": "BlitzMax",
	"scopeName": "source.bmx",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#string"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#function-name"
		},
		{
			"include": "#type-name"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-block"
				}
			]
		},
		"pre-compilation": {
			"begin": "@bmk\\b",
			"end": "(?=\n)",
			"beginCaptures": {
				"0": {
					"name": "support.script.start.bmx"
				}
			},
			"name": "support.script.bmx"
		},
		"comment-line": {
			"begin": "'",
			"end": "(?=\n)",
			"beginCaptures": {
				"0": {
					"name": "comment.line.apostrophe.begin.bmx"
				}
			},
			"name": "comment.line.apostrophe",
			"patterns": [
				{
					"include": "#pre-compilation"
				}
			]
		},
		"comment-block": {
			"begin": "^\\s*(?i:rem)\\b(?:\\s*$|\\s+.*)",
			"end": "^\\s*(?i:end\\s?rem)\\b\\s*",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "comment.block.end.bmx"
				}
			},
			"name": "comment.block.bmx"
		},
		"string": {
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bmx"
				}
			},
			"name": "string.quoted.double.bmx"
		},
		"keyword": {
			"patterns": [
				{
					"include": "#framework"
				},
				{
					"include": "#import"
				},
				{
					"include": "#include"
				},
				{
					"include": "#if-then-else-endif"
				},
				{
					"include": "#try-catch-finally-endtry"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#control"
				}
			]
		},
		"module-name": {
			"match": "\\w+\\.\\w+",
			"name": "variable.module.bmx"
		},
		"framework": {
			"begin": "\\b(?i:framework)\\b\\s*",
			"end": "(?=\\s+|\\W+)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.import.bmx"
				}
			},
			"patterns": [
				{
					"include": "#module-name"
				}
			]
		},
		"import": {
			"begin": "\\b(?i:import)\\b\\s*",
			"end": "(?=\\s+|\\W+)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.import.bmx"
				}
			},
			"patterns": [
				{
					"include": "#module-name"
				}
			]
		},
		"include": {
			"begin": "\\b(?i:include)\\b\\s*",
			"end": "(?=\\s+|\\W+)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.include.bmx"
				}
			}
		},
		"if-then-else-endif": {
			"begin": "\\b(?i:if|then|else\\s*if|else|end\\s*if)\\b\\s*",
			"end": "(?=\\s+|\\W+)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.conditional.bmx"
				}
			}
		},
		"try-catch-finally-endtry": {
			"begin": "\\b(?i:try|catch|finally|end\\s*try)\\b\\s*",
			"end": "(?=\\s+|\\W+)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.trycatch.bmx"
				}
			}
		},
		"operator": {
			"match": "(?i:\\+|\\-|\\^|\\/|\\|\\bmod\\b|\\bshl\\b|\\bshr\\b|\\bsar\\b|\\&|\\||\\~|\\=|\\<\\>|\\<|\\>|\\<\\=|\\=\\>)",
			"name": "keyword.operator.bmx"
		},
		"control": {
			"match": "\\b(?i:and|or|not)\\b",
			"name": "keyword.control.bmx"
		},
		"storage": {
			"patterns": [
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#type"
				},
				{
					"include": "#type-end"
				},
				{
					"include": "#function"
				},
				{
					"include": "#function-end"
				}
			]
		},
		"storage-modifier": {
			"match": "\\b(?i:extends|implements|abstract|final|export|override|where|public|private|protected|extern|end\\s*extern)\\b",
			"name": "storage.modifier.bmx"
		},
		"type-name": {
			"patterns": [
				{
					"include": "#type-name-support"
				},
				{
					"include": "#type-name-custom"
				}
			]
		},
		"type-name-support": {
			"match": "(?<=:\\s*(\\w+\\s+)?|(?i:new)\\s+)(?i:var|ptr|object|byte|short|int|uint|long|ulong|float|double|string|size_t|float64|int128|float128|double128|typename|elementtype|tblitzexception|tnullobjectexception|tnullmethodexception|tnullfunctionexception|tarrayboundsexception|toutofdataexception|truntimeexception|tinvalidenumexception|iiterable|iiterator|idisposable|lparam|wparam)\\b",
			"name": "support.type.bmx"
		},
		"type-name-custom": {
			"match": "(?<=:\\s*(\\w+\\s+)?|(?i:new)\\s+)\\w+",
			"name": "entity.name.class.bmx"
		},
		"type-name-word": {
			"match": "[aA-zZ]\\w*",
			"name": "entity.name.class.bmx"
		},
		"type-end": {
			"match": "\\b(?i:end\\s*type)\\b",
			"name": "storage.class.bmx"
		},
		"type": {
			"begin": "\\b(?i:type)\\b\\s*",
			"end": "(?=\\;|\\n|\\')",
			"beginCaptures": {
				"0": {
					"name": "storage.class.bmx"
				}
			},
			"patterns": [
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#type-name-word"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#function-name-certain"
				},
				{
					"include": "#function-name-guess"
				}
			]
		},
		"function-name-certain": {
			"match": "(?<!(?i:new\\s+))\\b(?<!:\\s*)\\w+(?=\\s*:\\s*\\w+\\s*\\(|\\()\\b",
			"name": "entity.name.function.bmx"
		},
		"function-name-guess": {
			"match": "(?<=^|;|,)\\s*\\w+\\b\\s+(?!\\.|\\,)(?=\\w+)",
			"name": "entity.name.function.guess.bmx"
		},
		"function-end": {
			"match": "\\b(?i:end\\s*function)\\b",
			"name": "storage.function.bmx"
		},
		"function": {
			"begin": "\\b(?i:function)\\b\\s*",
			"end": "\\w+",
			"beginCaptures": {
				"0": {
					"name": "storage.function.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "entity.name.function.bmx"
				}
			}
		}
	}
}