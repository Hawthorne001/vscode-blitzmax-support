{
	"version": "",
	"name": "BlitzMax",
	"scopeName": "source.bmx",
	"patterns": [
		{
			"desc": "Rem block",
			"begin": "^\\s*(?i:Rem)\\b(?:\\s*$|\\s+.*)",
			"end": "^\\s*(?i:End\\s?Rem)\\b\\s*",
			"name": "comment.block.bmx"
		},
		{
			"desc": "String",
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.bmx"
		},
		{
			"desc": "Line comment",
			"match": "'(.*)",
			"name": "comment.line.bmx"
		},
		{
			"patterns": [
				{
					"desc": "Type definition and names",
					"match": "(?i:((\\w+)?\\s*:\\s*|\\b(New)\\s+|\\s*\\b(Type|Extends|Implements)\\s+))(\\w+)",
					"captures": {
						"2": {
							"name": "variable.bmx"
						},
						"3": {
							"name": "keyword.operator.new.bmx"
						},
						"4": {
							"name": "storage.modifier.bmx"
						},
						"5": {
							"name": "entity.name.type.bmx"
						}
					}
				},
				{
					"desc": "Type ending",
					"match": "\\b(?i:End\\s*Type)\\b",
					"name": "storage.modifier.bmx"
				}
			]
		},
		{
			"desc": "BASIC style type tags",
			"match": "(?:(\\w+\\s*))(\\%|\\#|\\!|\\$)",
			"captures": {
				"1": {
					"name": "variable.bmx"
				},
				"2": {
					"name": "entity.name.type.bmx"
				}
			}
		},
		{
			"desc": "Variable creation",
			"match": "\\b((?i:Local|Global|Field))\\b\\s*(\\w+)?",
			"captures": {
				"1": {
					"name": "storage.modifier.bmx"
				},
				"2": {
					"name": "variable.bmx"
				}
			}
		},
		{
			"desc": "Constant creation",
			"match": "\\b(?i:Const)\\b",
			"name": "storage.modifier.constant.bmx"
		},
		{
			"desc": "Conditional compiling",
			"match": "^\\s*\\?.*",
			"name": "keyword.control.bmx"
		},
		{
			"desc": "End of Function and Method",
			"match": "\\b(?i:End\\s*)(?i:Function|Method)\\b",
			"name": "storage.modifier.bmx"
		},
		{
			"desc": "Start of Function and Method",
			"match": "\\b(?i:Function|Method)\\b\\s+(\\w+\\b)?",
			"captures": {
				"0": {
					"name": "storage.modifier.bmx"
				},
				"1": {
					"name": "entity.name.function.bmx"
				}
			}
		},
		{
			"desc": "Function and Method calls",
			"match": "((\\w+)\\.)?(\\w+)\\s*((\\%|\\#|\\!|\\$)|(:\\s*(\\w+)))?\\(",
			"captures": {
				"2": {
					"name": "variable.bmx"
				},
				"3": {
					"name": "entity.name.function.bmx"
				},
				"5": {
					"name": "storage.type.bmx"
				},
				"7": {
					"name": "storage.type.bmx"
				}
			}
		},
		{
			"desc": "Array names",
			"match": "(\\w+)\\s*\\[.*\\]",
			"captures": {
				"1": {
					"name": "variable"
				}
			}
		},
		{
			"desc": "If, Then, Repeat control logic",
			"match": "\\b(?i:If|End\\s*If|Then|Else\\s*(If)?|Repeat|Forever|Until|While|Wend)\\b",
			"name": "keyword.control.bmx"
		},
		{
			"desc": "Try Catch",
			"match": "\\b(?i:Try|Catch|End\\s*Try)\\b",
			"name": "keyword.control.try.bmx"
		},
		{
			"desc": "Include, Import, Framework",
			"match": "\\b(?i:Include|Import|Framework)\\b(\\s+\\w+\\.\\w+)?",
			"captures": {
				"0": {
					"name": "keyword.control.bmx"
				},
				"1": {
					"name": "string.bmx"
				}
			}
		},
		{
			"desc": "Just assume that every other word is a variable",
			"match": "(?=[a-zA-Z])\\w+",
			"name": "variable.bmx"
		}
	]
}