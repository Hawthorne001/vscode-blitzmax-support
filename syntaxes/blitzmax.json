{
	"name": "BlitzMax",
	"scopeName": "source.bmx",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#string"
		},
		{
			"include": "#invalid"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#meta"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#support"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#entity"
		},
		{
			"include": "#variable-other"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-block"
				}
			]
		},
		"bmk-script": {
			"begin": "@bmk\\b",
			"end": "$",
			"beginCaptures": {
				"0": {
					"name": "comment.line.script.start.bmx"
				}
			},
			"name": "comment.line.script.bmx"
		},
		"comment-line": {
			"begin": "'",
			"end": "$",
			"beginCaptures": {
				"0": {
					"name": "comment.line.apostrophe.begin.bmx"
				}
			},
			"name": "comment.line.apostrophe.bmx",
			"patterns": [
				{
					"include": "#bmk-script"
				}
			]
		},
		"comment-block": {
			"begin": "(?i)^\\s*rem\\b(?:\\s*$|\\s+.*)",
			"end": "(?i)^\\s*end\\s?rem\\b\\s*",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "comment.block.end.bmx"
				}
			},
			"name": "comment.block.bmx"
		},
		"constant": {
			"patterns": [
				{
					"include": "#constant-numeric"
				},
				{
					"include": "#constant-character"
				},
				{
					"include": "#constant-language"
				},
				{
					"include": "#constant-other"
				}
			]
		},
		"constant-numeric": {
			"match": "-?\\b(?:(0(?:x|X)[0-9a-zA-Z]+)|(?:[0-9](?:\\.|[a-fA-F]+)?)+)\\b",
			"name": "constant.numeric.bmx"
		},
		"constant-character": {
			"match": "",
			"name": "constant.character.bmx"
		},
		"constant-language": {
			"match": "(?i)\\b(True|False|Null)\\b",
			"name": "constant.language.bmx"
		},
		"constant-other": {
			"match": "",
			"name": "constant.other.bmx"
		},
		"string": {
			"patterns": [
				{
					"include": "#string-quoted-triple"
				},
				{
					"include": "#string-quoted-double"
				}
			]
		},
		"string-quoted-triple": {
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bmx"
				}
			},
			"name": "string.quoted.triple.bmx"
		},
		"string-quoted-double": {
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.bmx"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.bmx"
				}
			},
			"name": "string.quoted.double.bmx"
		},
		"invalid": {
			"patterns": [
				{
					"include": "#invalid-illegal"
				},
				{
					"include": "#invalid-deprecated"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"include": "#keyword-control"
				},
				{
					"include": "#keyword-operator"
				},
				{
					"include": "#keyword-other"
				}
			]
		},
		"keyword-control": {
			"patterns": [
				{
					"match": "\\b(?i)(And|Or|Not|Shl|Shr|Sar|Mod|Operator|Strict|SuperStrict|If|Then|Else|Else\\s*If|End\\s*If|For|To|Step|Next|EachIn|While|Wend|End\\s*While|Repeat|Until|Forever|Select|End\\s*Select|Case|Default|Exit|Continue|Return|New|Delete|Release|Module|ModuleInfo|Incbin|IncbinPtr|IncbinLen|Assert|Goto|Try|Catch|Finally|End\\s*Try|Throw|DefData|ReadData|RestoreData|Varptr|StackAlloc|FieldOffset|NoDebug|Alias)\\b",
					"name": "keyword.control.bmx"
				},
				{
					"begin": "^\\s*\\?",
					"end": "$",
					"name": "keyword.control.bmx"
				},
				{
					"begin": "^\\s*\\b(?i)(Include|Framework|Import)",
					"end": "((\\w+\\.\\w+)|(?=($|')))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.bmx"
						}
					},
					"endCaptures": {
						"1": {
							"name": "constant.language.bmx"
						}
					},
					"patterns": [
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"keyword-operator": {
			"match": "(?i)(\\:)?(\\*|\\-|\\+|\\~|\\=|\\!\\=|\\<\\=|\\>\\=|\\<\\>|\\<|\\>|\\&|\\||\\/)",
			"name": "keyword.operator.type.bmx"
		},
		"keyword-other": {
			"match": "\\.|\\.\\.|\\,|\\;|\\:",
			"name": "keyword.operator.other.bmx"
		},
		"meta": {
			"patterns": [
				{
					"match": "(\\(|\\))",
					"name": "meta.brace.round.bmx"
				},
				{
					"match": "(\\[|\\])",
					"name": "meta.brace.square.bmx"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"include": "#storage-type"
				},
				{
					"include": "#storage-modifier"
				}
			]
		},
		"storage-type": {
			"patterns": [
				{
					"match": "(?i)\\b(Const|Local|Global|Field)\\b",
					"name": "storage.type.var.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Type)\\b",
					"name": "storage.type.type.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Struct)\\b",
					"name": "storage.type.struct.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Function)\\b",
					"name": "storage.type.function.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Method)\\b",
					"name": "storage.type.method.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Enum)\\b",
					"name": "storage.type.enum.bmx"
				},
				{
					"match": "(?i)\\b((End\\s*)?Interface)\\b",
					"name": "storage.type.interface.bmx"
				}
			]
		},
		"storage-modifier": {
			"patterns": [
				{
					"match": "(?i)\\b(Public|Private|Protected|Extern|End\\s*Extern|Abstract|Extends|Implements|Final|ReadOnly|Export|Override|Where|StaticArray)\\b",
					"name": "storage.modifier.bmx"
				},
				{
					"begin": "(?<=.+)\\{",
					"end": "\\}",
					"name": "storage.modifier.meta.bmx"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"include": "#support-function"
				},
				{
					"include": "#support-class"
				},
				{
					"include": "#support-type"
				},
				{
					"include": "#support-constant"
				},
				{
					"include": "#support-variable"
				},
				{
					"include": "#support-other"
				}
			]
		},
		"support-function": {
			"match": "(?i)\\b(End|Pi|Asc|Chr|Len|SizeOf)\\b",
			"name": "support.function.bmx"
		},
		"support-type": {
			"match": "(?i)\\b(Byte|Short|Int|UInt|Long|ULong|Size_T|LParam|WParam|Float|Double|Int128|Float64|Float128|Double128|String|Object|Var|Ptr)\\b",
			"name": "support.type.bmx"
		},
		"variable": {
			"patterns": [
				{
					"include": "#variable-parameter"
				},
				{
					"include": "#variable-language"
				}
			]
		},
		"variable-parameter-word": {
			"match": "\\w+",
			"name": "variable.parameter.bmx"
		},
		"variable-parameter": {
			"begin": "(?i)(?<=\\b(Function|Method)\\s+(\\w+\\s*:\\s*)?\\w+\\s*(\\W\\s*)?)\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#invalid"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#storage"
				},
				{
					"include": "#string"
				},
				{
					"include": "#support"
				},
				{
					"include": "#entity"
				},
				{
					"include": "#variable-parameter-word"
				},
				{
					"include": "#variable"
				}
			]
		},
		"variable-language": {
			"match": "(?i)\\b(Self|Super)\\b",
			"name": "variable.language.bmx"
		},
		"variable-other": {
			"match": "\\w+",
			"name": "variable.other.bmx"
		},
		"entity": {
			"patterns": [
				{
					"include": "#entity-other"
				},
				{
					"include": "#entity-name"
				}
			]
		},
		"entity-other": {
			"patterns": [
				{
					"include": "#entity-other-inherited-class"
				},
				{
					"include": "#entity-other-attribute-name"
				}
			]
		},
		"entity-other-inherited-class": {
			"begin": "(?i)(?<=\\b(Extends|Implements)\\s+)",
			"end": "\\w+",
			"endCaptures": {
				"0": {
					"name": "entity.other.inherited.class.bmx"
				}
			},
			"name": "entity.name.class.bmx"
		},
		"entity-name": {
			"patterns": [
				{
					"include": "#entity-name-type"
				},
				{
					"include": "#entity-name-tag"
				},
				{
					"include": "#entity-name-function"
				},
				{
					"include": "#entity-name-section"
				}
			]
		},
		"entity-name-type": {
			"match": "(?i)(?<=:\\s*(\\w+\\s+)?|\\b(New|Type|Struct|Enum|Interface|Extends|Implements)\\s+)\\w+",
			"name": "entity.name.class.bmx"
		},
		"entity-name-tag": {
			"match": "(?i)(?<=\\w+\\s*(\\w+\\s+)?|\\bNew\\s+)(\\%|\\#|\\!|\\$)",
			"name": "entity.name.tag.bmx"
		},
		"entity-name-function": {
			"patterns": [
				{
					"include": "#entity-name-function-name-certain"
				},
				{
					"include": "#entity-name-function-name-guess"
				},
				{
					"include": "#entity-name-function-name-single"
				}
			]
		},
		"entity-name-function-name-certain": {
			"match": "(?i)(?<!\\b(?:New|Extends|Implements)\\s+)\\b(?<!:\\s*)\\w+(?=(\\s*:\\s*\\w+|\\%|\\#|\\!|\\$)\\s*\\(|\\s*\\()\\b",
			"name": "entity.name.function.bmx"
		},
		"entity-name-function-name-guess": {
			"match": "(?i)(?<=^\\s*|\\W+)(\\w+)\\b\\s+(?!\\.|\\,|(Then|Else|And|Or|Not|Return)\\b)(?=(\\w+|\"))",
			"name": "entity.name.function.guess.bmx"
		},
		"entity-name-function-name-single": {
			"match": "(?i)(?<=^\\s*|;\\s*|\\.\\.\\s*|\\bThen\\s*)(\\w+)\\s*(?=$|'.*|;)",
			"name": "entity.name.function.single.bmx"
		}
	}
}