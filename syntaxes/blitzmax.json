{
	"version": "",
	"name": "BlitzMax",
	"scopeName": "source.bmx",
	"patterns": [
		{
			"desc": "",
			"begin": "^\\s*(?i:Rem)\\b(?:\\s*$|\\s+.*)",
			"end": "^\\s*(?i:End\\s?Rem)\\b\\s*",
			"name": "comment.block.bmx"
		},
		{
			"desc": "String",
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.bmx"
		},
		{
			"desc": "Line comment",
			"match": "'(.*)",
			"name": "comment.line.bmx"
		},
		{
			"desc": "Preprocessor",
			"match": "\\s*\\?.*",
			"name": "meta.preprocessor.bmx"
		},
		{
			"match": "-?\\b(?:(0(?:x|X)[0-9a-zA-Z]+)|(?:[0-9](?:\\.|[a-fA-F]+)?)+)\\b",
			"name": "constant.numeric.bmx"
		},
		{
			"desc": "Built-in types",
			"begin": "(?<=:|\\b(?i:New)\\s+)\\s*\\b(Object|Byte|Short|Int|UInt|Long|ULong|Float|Double|String|Size_T|Float64|Int128|Float128|Double128|Typename|ElementType|ReturnTypeValueType Ptr|VariableType Var|Ptr|TBlitzException|TNullObjectException|TNullMethodException|TNullFunctionException|TArrayBoundsException|TOutOfDataException|TRuntimeException|TInvalidEnumException|IIterable|IIterator|IDisposable|LParam|WParam|Var|Ptr)",
			"end": "(?:\\W)",
			"beginCaptures": {
				"1": {
					"name": "support.type.bmx"
				}
			}
		},
		{
			"desc": "Function variables",
			"begin": "(?<=^\\s*\\w*\\s*(?:Function|Method).*)\\b(?<!\\s*=\\W*\\s*|\\).*)\\s*(\\w+\\b)(?!((\\s*\\W\\s*|\\s*:\\s*\\w+\\s*)?\\())",
			"end": "(?=.)",
			"beginCaptures": {
				"0": {
					"name": "variable.parameter.bmx"
				}
			}
		},
		{
			"match": "\\.\\.",
			"name": "keyword.operator.bmx"
		},
		{
			"match": ":(\\+|\\-|\\~|/|\\*)",
			"name": "keyword.operator.type.annotation.bmx"
		},
		{
			"match": "\\.",
			"name": "punctuation.accessor.bmx"
		},
		{
			"match": ";",
			"name": "punctuation.terminator.statement.bmx"
		},
		{
			"match": ",",
			"name": "punctuation.separator.comma.bmx"
		},
		{
			"match": "\\(",
			"name": "punctuation.definition.parameters.begin.bmx"
		},
		{
			"match": "\\)",
			"name": "punctuation.definition.parameters.end.bmx"
		},
		{
			"match": "\\[",
			"name": "meta.brace.square.bmx"
		},
		{
			"match": "\\]",
			"name": "meta.brace.square.bmx"
		},
		{
			"match": "\\{",
			"name": "meta.bmx"
		},
		{
			"match": "\\}",
			"name": "meta.bmx"
		},
		{
			"match": "\\<",
			"name": "punctuation.definition.typeparameters.begin.bmx"
		},
		{
			"match": "\\>",
			"name": "punctuation.definition.typeparameters.end.bmx"
		},
		{
			"desc": "Storage modifiers",
			"match": "\\s+(Extends|Implements|Final|Override|Where|Abstract)\\s*",
			"name": "storage.modifier.bmx.bmx"
		},
		{
			"desc": "Type, Enum, Struct, Interface definition",
			"patterns": [
				{
					"begin": "(?<=^|^\\s*(?:Private|Public|Protected|Export|ReadOnly)\\s+|;)\\s*\\b(?i:(Type|Enum|Struct|Interface)\\s+([aA-zZ_]\\w*))(?i:\\s*(Extends|Implements|Final|Override|Where|Abstract)\\b\\s*(\\w*))?(?i:\\s*(Extends|Implements|Final|Override|Where|Abstract)\\b\\s*(\\w*))?(?i:\\s*(Extends|Implements|Final|Override|Where|Abstract)\\b\\s*(\\w*))?(?i:\\s*(Extends|Implements|Final|Override|Where|Abstract)\\b\\s*(\\w*))?(?i:\\s*(Extends|Implements|Final|Override|Where|Abstract)\\b\\s*(\\w*))?\\b",
					"end": "(?=\\W)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.bmx"
						},
						"2": {
							"name": "entity.name.type.bmx"
						},
						"0": {
							"name": "storage.modifier.bmx"
						},
						"4": {
							"name": "entity.name.type.bmx"
						},
						"6": {
							"name": "entity.name.type.bmx"
						},
						"8": {
							"name": "entity.name.type.bmx"
						},
						"10": {
							"name": "entity.name.type.bmx"
						},
						"12": {
							"name": "entity.name.type.bmx"
						}
					}
				},
				{
					"begin": "(?<=^|;)\\s*\\b(?i:(End\\s*(Type|Enum|Struct|Interface)))\\b",
					"end": "(?=\\W|\n)",
					"beginCaptures": {
						"0": {
							"name": "storage.type.class.bmx"
						}
					}
				}
			]
		},
		{
			"desc": "Built-in variables",
			"begin": "\\s*\\b(?i:(AppDir|AppFile|AppTitle|AppArgs|LaunchDir))\\b",
			"end": "(?=\\W)",
			"beginCaptures": {
				"1": {
					"name": "support.variable.bmx"
				}
			}
		},
		{
			"desc": "Built-in keywords",
			"begin": "\\s*\\b(?i:(Strict|SuperStrict|Assert))\\b",
			"end": "(?=\\W)",
			"beginCaptures": {
				"1": {
					"name": "keyword.bmx"
				}
			}
		},
		{
			"desc": "Function and Method definition",
			"patterns": [
				{
					"begin": "(?<=^\\s*\\w*\\s*|;)\\s*\\b(?i:(Function|Method))\\b",
					"end": "(?=\\W)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.bmx"
						}
					}
				},
				{
					"begin": "(?<=^|;)\\s*\\b(?i:(End\\s*(Function|Method)))\\b",
					"end": "(?=\\W|\n)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.bmx"
						}
					}
				}
			]
		},
		{
			"desc": "Storage",
			"begin": "(?<=^|;)\\s*\\b(?i:(Private|Public|Protected|Export|ReadOnly)|(Global|Local|Field|Const))\\b",
			"end": "(?=\\W|\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.bmx"
				},
				"2": {
					"name": "storage.type.bmx"
				}
			}
		},
		{
			"desc": "Constant language",
			"begin": "\\b(?i:True|False|Null|Pi)\\b",
			"end": "(?=.)",
			"beginCaptures": {
				"0": {
					"name": "constant.language.bmx"
				}
			}
		},
		{
			"desc": "Operators",
			"patterns": [
				{
					"begin": "\\s+(?i:Or|Xor|And|Not|Shl|Shr|Sar|Len|Mod)\\s+",
					"end": "(?=.)",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.bmx"
						}
					}
				},
				{
					"match": "\\*|\\-|\\+|\\;|\\:|~|=|!=|<=|>=|<>|<|>|&|\\||/",
					"name": "keyword.operator.bmx"
				}
			]
		},
		{
			"desc": "Language variables",
			"match": "\\b(?i:Super|Self)\\b",
			"name": "variable.language.bmx"
		},
		{
			"desc": "New operator",
			"match": "\\b(?i:New)\\b",
			"name": "keyword.operator.new.bmx"
		},
		{
			"desc": "Deprecated",
			"begin": "(?<=^|\\W|;)\\s*\\b(?i:(Goto|DefData|ReadData|RestoreData))\\b",
			"end": "(?=\\W)",
			"beginCaptures": {
				"1": {
					"name": "invalid.deprecated.bmx"
				}
			}
		},
		{
			"desc": "Control keywords",
			"patterns": [
				{
					"begin": "(?<!(?i:End))\\s*\\b(?i:(Try|Catch|Finally|Extern|If|Then|Else|Else If|End|For|To|Step|Each|EachIn|While|Wend|Repeat|Forever|Until|Next|Continue|Exit|Select|Default|Case|Return))\\b",
					"end": "(?=.)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.bmx"
						}
					}
				},
				{
					"begin": "(?i:(End\\s*(Try|If|Extern|While|Select)))",
					"end": "(?=.)",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.end.bmx"
						}
					}
				}
			]
		},
		{
			"desc": "Imports and Includes",
			"begin": "(?=^)\\s*\\b(?i:(Framework)|(Import)|(Include)|(Incbin)|(Module|ModuleInfo))\\b",
			"end": "(?=.)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.framework.bmx"
				},
				"2": {
					"name": "keyword.control.import.bmx"
				},
				"3": {
					"name": "keyword.control.include.bmx"
				},
				"4": {
					"name": "keyword.control.incbin.bmx"
				},
				"5": {
					"name": "keyword.control.module.bmx"
				}
			}
		},
		{
			"desc": "Function and Method names",
			"begin": "(?<!\\d|:|\\b(?i:New)\\s+)(?!\\s+(?i:New|Or|Xor|And|Not|Shl|Shr|Sar|Len|Mod)\\s+)(\\b[aA-zZ_]\\w*)(?=\\s*(:\\s*\\w+|(%|#|!|\\$))?\\s*\\()",
			"end": "(?=\\W)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.bmx"
				}
			}
		},
		{
			"desc": "Sloppy Function and Method names",
			"patterns": [
				{
					"begin": "(?<!\\W)\\s*(?!\\b(?i:New|Or|Xor|And|Not|Shl|Shr|Sar|Len|Mod))(\\b[aA-zZ_]\\w*)(?=\\s+(?:\"|\\.|[^\\W]))",
					"end": "(?=.)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.bmx"
						}
					}
				},
				{
					"begin": "(?<=^|;)\\s*(\\w+)(?=\\s*$)",
					"end": "(?=.)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.bmx"
						}
					}
				}
			]
		},
		{
			"desc": "BASIC style type tags",
			"begin": "(?<=\\w|(?i:\\bNew\\b\\s+))\\s*(%|#|!|\\$)",
			"end": "(?=.)",
			"beginCaptures": {
				"1": {
					"name": "support.type.basic.bmx"
				}
			}
		},
		
		{
			"desc": "Built-in functions",
			"begin": "\\s*\\b(?i:(End|Asc|Chr|IncbinPtr|IncbinLen|Release|Delete|StackAlloc|FieldOffset|StaticArray|Max|Min|Abs|Sgn|RuntimeError|DebugStop|DebugLog|OnEnd|ReadStdin|WriteStdout|Delay|UDelay|MilliSecs|MemAlloc|MemFree|MemExtend|MemClear|MemCopy|MemMove|GCSetMode|GCSuspend|GCResume|GCCollect|GCCollectALittle|GCMemAlloced|GCEnter|GCLeave|GCRetain|GCRelease|GCThreadIsRegistered|GCRegisterMyThread|GCUnregisterMyThread|HandleFromObject|HandleToObject|ArrayCopy|IsEmptyArray|IsEmptyString|ObjectIsString))\\b",
			"end": "(?=\\W)",
			"beginCaptures": {
				"1": {
					"name": "support.function.bmx"
				}
			}
		},
		{
			"desc": "Type names",
			"begin": "(?<=:|(?i:\\bNew\\b\\s+))\\s*([aA-zZ_]\\w*)",
			"end": "(?=.)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.bmx"
				}
			}
		},
		{
			"match": "\\w",
			"name": "variable.bmx"
		}
	]
}